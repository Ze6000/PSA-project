[
    {
        "id": "edca0f25a5a53c84",
        "type": "tab",
        "label": "Connect to DB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "50dc2492de3aed7a",
        "type": "tab",
        "label": "Visualização",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "20feb3bf1cc0df78",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#cfd2d3",
                "baseFont": "Arial,Arial,Helvetica,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#cfd2d3",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#cfd2d3",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#f7f7f8",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#cfd2d3",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "Arial,Arial,Helvetica,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 200,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "376296cbb0280e33",
        "type": "ui_tab",
        "name": "Visualização de Dados",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9740a34482d7aebb",
        "type": "ui_group",
        "name": "Registos",
        "tab": "376296cbb0280e33",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d8122ae29145e7f2",
        "type": "MySQL-Server-Connector",
        "name": "",
        "host": "eddata.cxsiyce6iyui.eu-west-3.rds.amazonaws.com",
        "port": "3306",
        "user": "admin",
        "password": "psa2024edward",
        "tls": true,
        "database": "psadata"
    },
    {
        "id": "adcb5e99c9bcf6b8",
        "type": "MySQLdatabase",
        "name": "DB",
        "host": "193.137.172.20",
        "port": "87",
        "db": "linha_ed",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "9d4896117d3b84ba",
        "type": "mqtt-broker",
        "name": "esp32_bea",
        "broker": "193.137.172.20",
        "port": "85",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "detecao",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "{ \"N_Comp\": \"\", \"Leak_Detected\": \"\", \"N_fugas\": \"\", \"ESTADO_SENSOR\": \"\", \"ESTADO_ROBO\": \"\"}",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "68c89356a3f8d9b3",
        "type": "inject",
        "z": "edca0f25a5a53c84",
        "name": "InjectCSV",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "2c9bcaa671241c3f",
                "277b31df2f1b8806"
            ]
        ]
    },
    {
        "id": "277b31df2f1b8806",
        "type": "function",
        "z": "edca0f25a5a53c84",
        "name": "loadCsvToSql",
        "func": "\n// Create a connection to the MySQL database\nconst connection = mysql.createConnection({\n    host: '193.137.172.20',\n    port: '87',\n    user: 'teste',\n    database: 'linha_ed',\n    connectTimeout: 60000\n});\n\n// Read the CSV file\nfs.readFile('C:\\\\Users\\\\Edward\\\\Documents\\\\psa2024\\\\data\\\\LocationResults_ODU.csv', 'utf8', (err, data) => {\n    if (err) {\n        node.warn(err);\n        return;\n    }\n\n    // Split the CSV data into rows\n    const rows = data.split('\\n').map(row => row.trim());\n    let values = []; // Array to store values for bulk insert\n\n    // Process each row and prepare values for bulk insert\n    rows.forEach((row, index) => {\n        if (index === 0) return; // Skip header row\n        const columns = row.split(';').map(e => e.trim());\n        values.push(columns);\n\n        // If batch size reaches 100 or it's the last row, perform bulk insert\n        if (values.length === 1000) {\n            performBulkInsert(values);\n            values = []; // Reset values array for the next batch\n        }\n        if(index === rows.length - 1) {\n            performBulkInsert(values);\n            values = []; // Reset values array for the next batch\n            setTimeout(() => connection.end(), 60000);\n        }\n    });\n});\n\n// Function to perform bulk insert\nfunction performBulkInsert(values) {\n    const sql = 'INSERT INTO LocationResults (LOCATION_RESULT_UID, UNIQUEPART_ID, LOCATION_ID, RESULT_DATE, PROCESS_NUMBER, PSTATINTERVAL, WORKCYCLE_COUNTER, RESULT_STATE, PART_ATTRIBUTE, TYPE_NUMBER, TYPE_VARIANT, TYPE_VERSION, MACHINE_ID, SHIFT_CODE, ARCHIVE_FLAG, BATCH, DELETE_DATE, TEST_TYPE, TIME_STAMP) VALUES ?';\n    connection.query(sql, [values], (err, results) => {\n        if (err) {\n            node.warn(err);\n            return;\n        }\n        node.warn(results);\n    });\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "mysql",
                "module": "mysql"
            },
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 520,
        "y": 260,
        "wires": [
            [
                "b493294e411337e5"
            ]
        ]
    },
    {
        "id": "2c9bcaa671241c3f",
        "type": "debug",
        "z": "edca0f25a5a53c84",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 160,
        "wires": []
    },
    {
        "id": "b493294e411337e5",
        "type": "debug",
        "z": "edca0f25a5a53c84",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 200,
        "wires": []
    },
    {
        "id": "384d0110c516cfba",
        "type": "function",
        "z": "edca0f25a5a53c84",
        "name": "BROKERToSql",
        "func": "\n// Create a connection to the MySQL database\nconst connection = mysql.createConnection({\n    host: '193.137.172.20',\n    port: '87',\n    user: 'teste',\n    database: 'linha_ed',\n    connectTimeout: 60000\n});\n\n// Connect to the MySQL database\nconnection.connect((err) => {\n    if (err) {\n        node.error('Error connecting to MySQL: ' + err.stack);\n        return;\n    }\n    node.log('Connected to MySQL as id ' + connection.threadId);\n});\n\n// Fetch the variables from the MQTT message payload\n\nlet N_Comp = msg.payload.N_Comp;\nlet N_fugas = msg.payload.N_fugas;\nlet Leak_Detected = msg.payload.Leak_Detected;\nlet ESTADO_SENSOR = msg.payload.ESTADO_SENSOR;\nlet ESTADO_ROBO = msg.payload.ESTADO_ROBO;\n\nnode.log(\"N_Comp: \" + N_Comp);\nnode.log(\"N_fugas: \" + N_fugas);\nnode.log(\"Leak_Detected: \" + Leak_Detected);\nnode.log(\"ESTADO_SENSOR: \" + ESTADO_SENSOR);\nnode.log(\"ESTADO_ROBO: \" + ESTADO_ROBO);\n\n\n\n// Define the SQL query to insert the variables into the database\nlet sql = 'INSERT INTO fugas (N_Comp, N_fugas, Leak_Detected, ESTADO_SENSOR, ESTADO_ROBO) VALUES (?, ?, ?, ?, ?)';\n\n// Execute the SQL query\nconnection.query(sql, [N_Comp, N_fugas, Leak_Detected, ESTADO_SENSOR, ESTADO_ROBO], (err, results) => {\n    if (err) {\n        node.error('Error executing query: ' + err.stack);\n        return;\n    }\n    node.log('Query results: ' + JSON.stringify(results));\n});\n\nif (N_Comp === 0 || N_Comp === \"\") {\n    clearTable();\n}\n\n// Function to clear the table\nfunction clearTable() {\n    let clearSql = 'TRUNCATE TABLE fugas'; // Assuming 'fugas' is your table name\n    connection.query(clearSql, (err, results) => {\n        if (err) {\n            node.error('Error clearing table: ' + err.stack);\n            return;\n        }\n        node.log('Table cleared.');\n    });\n}\n\n// Close the MySQL connection\nconnection.end((err) => {\n    if (err) {\n        node.error('Error ending the connection: ' + err.stack);\n        return;\n    }\n    node.log('MySQL connection closed.');\n});\n\n// Return the original message to continue the flow\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "mysql",
                "module": "mysql"
            }
        ],
        "x": 520,
        "y": 420,
        "wires": [
            [
                "b59fa7da1e85003a"
            ]
        ]
    },
    {
        "id": "b59fa7da1e85003a",
        "type": "debug",
        "z": "edca0f25a5a53c84",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "fad2eddd74f0655a",
        "type": "mqtt in",
        "z": "edca0f25a5a53c84",
        "name": "Variaveis_DeteçãoErros",
        "topic": "detecao",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "9d4896117d3b84ba",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 420,
        "wires": [
            [
                "384d0110c516cfba",
                "e0311ef8f82d4670"
            ]
        ]
    },
    {
        "id": "e0311ef8f82d4670",
        "type": "debug",
        "z": "edca0f25a5a53c84",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "bfec822f6a5f674a",
        "type": "ui_table",
        "z": "50dc2492de3aed7a",
        "group": "9740a34482d7aebb",
        "name": "Linha",
        "order": 4,
        "width": 6,
        "height": 7,
        "columns": [
            {
                "field": "UNIQUEPART_ID",
                "title": "ID Peça",
                "width": "180",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Linha",
                "title": "Linha",
                "width": "150",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Estacao",
                "title": "Estação",
                "width": "100",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Posto",
                "title": "Posto",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "RESULT_DATE",
                "title": "Timestamp Passagem",
                "width": "160",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "7ae33179ce712c6e",
        "type": "inject",
        "z": "50dc2492de3aed7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM timestampspostos",
        "payload": "SELECT * FROM timestampspostos",
        "payloadType": "str",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "f05bc796ca648fbc"
            ]
        ]
    },
    {
        "id": "f05bc796ca648fbc",
        "type": "mysql",
        "z": "50dc2492de3aed7a",
        "mydb": "adcb5e99c9bcf6b8",
        "name": "Database",
        "x": 580,
        "y": 140,
        "wires": [
            [
                "bfec822f6a5f674a",
                "ad52aa620caed816"
            ]
        ]
    },
    {
        "id": "6592616383f11408",
        "type": "ui_form",
        "z": "50dc2492de3aed7a",
        "name": "",
        "label": "Pesquisa Datas",
        "group": "9740a34482d7aebb",
        "order": 3,
        "width": 3,
        "height": 1,
        "options": [
            {
                "label": "Start Date",
                "value": "start_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End Date",
                "value": "end_date",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "end_date": ""
        },
        "payload": "",
        "submit": "Procurar",
        "cancel": "Cancelar",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 260,
        "wires": [
            [
                "e50a2f572c76d396",
                "365a8bde7666a19c"
            ]
        ]
    },
    {
        "id": "e50a2f572c76d396",
        "type": "function",
        "z": "50dc2492de3aed7a",
        "name": "StartEnd Date",
        "func": "\nmsg.topic = \"SELECT * FROM linha_ed.timestampspostos WHERE RESULT_DATE >= \\\"\" + msg.payload['start_date'] + \"\\\" AND RESULT_DATE <= \\\"\" + msg.payload['end_date'] + \"\\\";\";\nnode.warn(msg.topic);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 220,
        "wires": [
            [
                "f05bc796ca648fbc"
            ]
        ]
    },
    {
        "id": "365a8bde7666a19c",
        "type": "debug",
        "z": "50dc2492de3aed7a",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 280,
        "wires": []
    },
    {
        "id": "ad52aa620caed816",
        "type": "ui_table",
        "z": "50dc2492de3aed7a",
        "group": "9740a34482d7aebb",
        "name": "Deteção",
        "order": 1,
        "width": 6,
        "height": 4,
        "columns": [
            {
                "field": "N_Comp",
                "title": "Count Peças",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Leak_Detected",
                "title": "Defeito",
                "width": "100",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "N_fugas",
                "title": "Nº de Fugas",
                "width": "150",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ESTADO_SENSOR",
                "title": "Peça Pronta",
                "width": "150",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ESTADO_ROBO",
                "title": "Braço Ativado",
                "width": "150",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 760,
        "y": 220,
        "wires": []
    },
    {
        "id": "0b6e3e8e7e6feb15",
        "type": "ui_form",
        "z": "50dc2492de3aed7a",
        "name": "",
        "label": "Pesquisa Peça",
        "group": "9740a34482d7aebb",
        "order": 2,
        "width": 3,
        "height": 1,
        "options": [
            {
                "label": "Part Search",
                "value": "UNIQUEPART_ID",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "UNIQUEPART_ID": ""
        },
        "payload": "",
        "submit": "Procurar",
        "cancel": "Cancelar",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "c51c5f2c973db639",
                "4d793cd8df83b9fe"
            ]
        ]
    },
    {
        "id": "c51c5f2c973db639",
        "type": "function",
        "z": "50dc2492de3aed7a",
        "name": "Search Part",
        "func": "msg.topic = \"SELECT * FROM linha_ed.timestampspostos WHERE UNIQUEPART_ID = \\'\" + msg.payload['UNIQUEPART_ID'] + \"\\';\";\nnode.warn(msg.topic);\nreturn msg;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 340,
        "wires": [
            [
                "f05bc796ca648fbc"
            ]
        ]
    },
    {
        "id": "99295797f7c695a5",
        "type": "ui_text",
        "z": "50dc2492de3aed7a",
        "group": "9740a34482d7aebb",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Link para Imagens",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 440,
        "wires": []
    },
    {
        "id": "2f8499efcb079e99",
        "type": "inject",
        "z": "50dc2492de3aed7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "https://github.com/Ze6000/PSA-project/tree/main/Leaks",
        "payloadType": "str",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "4d793cd8df83b9fe"
            ]
        ]
    },
    {
        "id": "4d793cd8df83b9fe",
        "type": "function",
        "z": "50dc2492de3aed7a",
        "name": "Inject_and_ConvertPayload",
        "func": "// Define the message you want to set as the new payload\nlet newMessage = \"https://github.com/Ze6000/PSA-project/tree/main/Leaks\";\n\n// Set the new message as the payload\nmsg.payload = newMessage;\n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "99295797f7c695a5"
            ]
        ]
    }
]